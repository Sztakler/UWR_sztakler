module tff(output q, nq, input t, clk, nrst);

logic ns, nr, ns1, nr1, j, k;

nand           
n1(ns, clk, j), 
n2(nr, clk, k),
n3(q, ns, nq), 
n4(nq, nr, q, nrst),
n5(ns1, !clk, t, nq), 
n6(nr1, !clk, t, q),
n7(j, ns1, k), 
n8(k, nr1, j, nrst);
endmodule

module asyncnt(output [2:0] q, input [2:0] d, input clk, en, load, nrst);

  logic [2:0] nq, t;

  assign t[0] = load? d[0] ^ q[0]:en;
  tff tf0(q[0], 
          nq[0], 
          t[0], 
          clk, 
          nrst);
  
  assign t[1] = load? d[1] ^ q[1]:q[0] & t[0];				   	
  tff tf1(q[1], 
          nq[1], 
          t[1], 
          clk, 
          nrst);
  
  assign t[2] = load? d[2] ^ q[2] :q[1] & t[1];				
  tff tf2(q[2], 
          nq[2], 
          t[2], 
          clk, 
          nrst);
  

endmodule

